searchState.loadedDescShard("bewu", 0, "The app state\nThe app state\nReturns the argument unchanged.\nGet the kitsu anime for the given id.\nGet kitsu episodes for the anime with the given id\nGet a kitsu episode by id.\nCalls <code>U::from(self)</code>.\nRun a search on kitsu.\nShutdown the app state.\nStart a vidstreaming episode download.\nReturns the argument unchanged.\nGet a kitsu anime.\nCalls <code>U::from(self)</code>.\nCreate a new database at the given path, or open it if it …\nOptimize the database.\nShut down the database.\nUpsert kitsu anime.\nUpsert kitsu episodes\nAnime data fetched from kitsu\nAnime episode data fetched from kitsu\nThe anime id\nThe episode id\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe timestamp of the last update.\nThe timestamp of the last update.\nThe length, in minutes\nThe episode number, in the current season.\nThe rating\nThe url slug\nThe synopsis\nThe synopsis\nThe original thumbnail url.\nThe title\nThe title\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClose and join the task\nThe state of a download\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad and validate a config.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA join handle wrapper that will abort the task when …\nOpen a lock file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner handle, without aborting it.\nTry to lock the file, waiting if it is locked.\nWrap a join handle\nSend the shutdown signal and wait for the thread to close.\nLock the file, exiting immediately if it is locked.\nUnlock the file")