searchState.loadedDescShard("bewu_util", 0, "A join handle wrapper that will abort the task when …\nAn async LRU whose entries are valid for only a certian …\nThe channel lagged.\nA state that is changed via updates.\nEither the state if the channel lagged, or an update.\nThe receiver for state updates\nA Stream wrapper for a state update receiver\nThe sender for state updates.\nThe update.\nThe update that can be applied to this state.\nApply an update to this state.\nOpen a lock file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an entry by a value, providing a function that returns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner handle, without aborting it.\nTry to lock the file, waiting if it is locked.\nWrap a join handle\nMake a new <code>AsyncTimedLruCache</code>.\nParse an ffmpeg time, returning the time in seconds.\nGet the next update in this stream, or the state if …\nSend an update and apply it to the state.\nSend the shutdown signal and wait for the thread to close.\nGet an immutable reference to the state.\nGet an immutable reference to the state.\nMake a bounded channel.\nLock the file, exiting immediately if it is locked.\nUnlock the file")