(function() {
    var type_impls = Object.fromEntries([["bewu",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncTimedLruCache%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bewu_util/async_timed_lru_cache.rs.html#16-19\">source</a><a href=\"#impl-AsyncTimedLruCache%3CK,+V%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"struct\" href=\"bewu_util/async_timed_lru_cache/struct.AsyncTimedLruCache.html\" title=\"struct bewu_util::async_timed_lru_cache::AsyncTimedLruCache\">AsyncTimedLruCache</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/bewu_util/async_timed_lru_cache.rs.html#27\">source</a><h4 class=\"code-header\">pub fn <a href=\"bewu_util/async_timed_lru_cache/struct.AsyncTimedLruCache.html#tymethod.new\" class=\"fn\">new</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.usize.html\">usize</a>, valid_for: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"bewu_util/async_timed_lru_cache/struct.AsyncTimedLruCache.html\" title=\"struct bewu_util::async_timed_lru_cache::AsyncTimedLruCache\">AsyncTimedLruCache</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Make a new <a href=\"bewu_util/async_timed_lru_cache/struct.AsyncTimedLruCache.html\" title=\"struct bewu_util::async_timed_lru_cache::AsyncTimedLruCache\"><code>AsyncTimedLruCache</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">ยง</a>Panics</h5>\n<p>Panics if the capacity is 0.\nTo simulate a 0-sized cache, instead use 0 for <code>valid_for</code> and a <code>capacity</code> of 1.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/bewu_util/async_timed_lru_cache.rs.html#36-39\">source</a><h4 class=\"code-header\">pub async fn <a href=\"bewu_util/async_timed_lru_cache/struct.AsyncTimedLruCache.html#tymethod.get\" class=\"fn\">get</a>&lt;FN, FUT&gt;(&amp;self, key: K, func: FN) -&gt; V<div class=\"where\">where\n    FN: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; FUT,\n    FUT: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = V&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Get an entry by a value, providing a function that returns a future that is called if the cache entry is expired or empty.</p>\n<p>It is guaranteed that the function will be called only once if many gets run in parallel.</p>\n</div></details></div></details>",0,"bewu::app_state::kitsu::SearchCache"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-AsyncTimedLruCache%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bewu_util/async_timed_lru_cache.rs.html#81-83\">source</a><a href=\"#impl-Debug-for-AsyncTimedLruCache%3CK,+V%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"bewu_util/async_timed_lru_cache/struct.AsyncTimedLruCache.html\" title=\"struct bewu_util::async_timed_lru_cache::AsyncTimedLruCache\">AsyncTimedLruCache</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bewu_util/async_timed_lru_cache.rs.html#85\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","bewu::app_state::kitsu::SearchCache"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[5692]}